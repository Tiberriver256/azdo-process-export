{"name":"AzDO Process Export – Summary & PRD","type":"document","content":"# Azure DevOps Process Export – Summary & Full PRD\n\n## Executive Summary\nThe azdo‑process‑export initiative delivers a single‑command Python CLI that captures every process‑relevant facet of an Azure DevOps project into one comprehensive, portable JSON file.  It enables delivery leads, process coaches, and analysts to obtain a point‑in‑time snapshot of configuration and activity trends—including work‑item metadata, team settings, backlog hierarchy, pipelines, and usage metrics—without needing to stitch multiple APIs together.  The tool emphasises zero‑configuration authentication inside Azure environments, graceful Personal Access Token (PAT) fallback, and a “Screaming Architecture” folder structure that separates domain logic from infrastructure details.  Implementation is fully acceptance‑test‑driven (BDD with behave), and production readiness is ensured through structured logging, resilience to transient Azure DevOps outages, and ≤5‑minute runtime on projects with up to 50 k work items.\n\n## Key Outcomes & Decisions\n- Scope: One project per invocation; cross‑org exports and data anonymisation are intentionally out‑of‑scope.\n- Primary Deliverable: azdo-process-export process --project \"My Project\" --out process.json produces a ≤50 MB JSON artefact that feeds downstream HTML/Markdown report generators.\n- Authentication Strategy: DefaultAzureCredential chain first; explicit --pat override accepted for non‑Azure environments or Analytics scopes.\n- Performance: Asyncio with up to 10 concurrent REST/OData requests; fatal exit if Analytics root is unreachable, but individual entity fetch failures downgrade to warnings.\n- Data Model: Rich domain objects serialised by orjson include work‑item types/fields, behaviours, teams, backlog levels, team settings, user enrichment, and monthly aggregates for work items, PRs, and pipeline runs.\n- Testing: Pure BDD—each requirement mapped to Gherkin scenarios and executed against an ephemeral demo organisation during CI.\n- Observability: JSON logs (Better Stack guidance), no root logger, trace‑level available via --log-level trace.\n- Open Questions (to revisit in future sprint refinement):\n  1. Should export slicing (e.g., last N months only) be prioritised for very large projects?\n  2. Is Parquet or another columnar output needed sooner than later?\n  3. What is the minimal PAT scope we can request while still covering both REST and OData APIs?\n\n## Next‑Step Checklist\n| Owner | Task | Due |\n|-------|------|-----|\n| Dev Lead | Spike: analytics endpoint 404 handling & retry back‑off tuning | 2025‑07‑22 |\n| Test Eng. | Flesh out remaining behave scenarios for edge authentication flows | 2025‑07‑24 |\n| Docs | Draft README quick‑start and link schema versioning guide | 2025‑07‑25 |\n| PM | Decide on slice/Parquet roadmap items | 2025‑07‑28 |\n\n---\n\n# Product Requirements Document (Full)\n\ntext\nSummary (TL;DR) – This PRD describes azdo-process-export, a single-command Python \nCLI that dumps every process-relevant facet of an Azure DevOps project into one giant, \nportable JSON file. It leans on first-party REST and OData Analytics APIs for breadth (work-item \nmetadata, teams, backlogs, pipelines, etc.) and on Microsoft Graph for AAD enrichment. \nAuthentication defaults to DefaultAzureCredential but gracefully falls back to a PAT. The \nproject follows “Screaming Architecture,” embeds PEP 723 dependency blocks so it can be \nexecuted with uv run, and is driven by BDD acceptance tests with Behave. Failure to reach \nthe Analytics service is treated as a hard error with a clear warning. \n \n1. Goals \n# Goal Metric \n\nG1 Produce a single JSON file \n(< 50 MB in 95 % of projects) \ncapturing complete process \nconfiguration & activity trends \nfor one project \n\nFile generated with exit code \n0 \n\nG2 Zero-configuration auth for \ndevelopers running in any \nAzure environment \n\n90 % of runs succeed with \nDefaultAzureCredential \n\nG3 Enable downstream \nHTML/Markdown report \ngenerators \n\nJSON schema published & \nversioned \n\nG4 Runtime < 5 min on a project \nwith ≤ 50 k work items \n\n95th-percentile runtime \nmeasured in CI \n \n2. Non-Goals \n● Cross-project or cross-org exports \n \n● Data anonymization or PII stripping \n \n● Rendering reports – only raw collection here \n \n● Real-time watching/streaming of project changes \n \n \n\n3. Personas & Use-Cases \n● Delivery Lead – wants to understand backlog health before takeover. \n \n● Process Coach – audits team settings to spot anti-patterns. \n \n● Data Analyst – pipes the JSON into Power BI or Pandas to build visuals. \n \n \n\n4. Key Requirements \n\n4.1 Functional \n\n1. Export metadata \n \n○ Work-item types (List /wit/workitemtypes) (learn.microsoft.com) \n \n○ Work-item fields (GET /wit/fields) (learn.microsoft.com) \n \n○ Work-item behaviors per process (GET /processes/{id}/behaviors) \n(learn.microsoft.com) \n \n○ Teams list (GET /_apis/projects/{projectId}/teams) \n(learn.microsoft.com) \n \n○ Backlog levels & hierarchy (GET /work/backlogs) (learn.microsoft.com) \n \n○ Team settings (working days, bug behavior, default iteration) (GET \n/work/teamsettings) (learn.microsoft.com) \n \n2. Export activity metrics via OData Analytics v4: \n \n○ Monthly closed / created work-items (query WorkItemsSnapshot aggregated \nby CompletedDate & CreatedDate) (learn.microsoft.com) \n \n○ Monthly work-item updates (WorkItemRevisions) \n \n○ Monthly PRs merged (PullRequestEvents) \n \n○ Monthly pipeline runs (Runs - List) (learn.microsoft.com) \n \n3. Enrich users – lookup each unique Azure DevOps identity in Microsoft Graph GET \n/users/{id} to pull job title & mail (learn.microsoft.com); annotate usage patterns \n(PR-heavy vs work-item-heavy) from Analytics counts. \n \n4. Authentication \n \n○ Attempt DefaultAzureCredential() chain first (learn.microsoft.com) \n \n○ Accept --pat $TOKEN to feed BasicAuth for both REST & OData. \n \n5. CLI UX – single verb: \n \n$ azdo-process-export process --project \"My Project\" \\ \n                              [--pat $AZDO_PAT] \\ \n                              --out process.json \n \n4.2 Non-Functional \n \n● Resilience – any 429/503 retries with exponential back-off; fatal if Analytics root \n(/_odata) unreachable. \n \n● Performance – parallelize entity downloads with asyncio + ten concurrent requests. \n \n● Observability – structured JSON logs following Better Stack guidance (levels, \ntimestamps, no root logger) (betterstack.com) \n \n \n\n5. Technical Architecture \n\n5.1 Folder Layout (Screaming Architecture) \nazdo_process_export/ \n ├── domain/          # project_process.py, metrics.py \n ├── infrastructure/  # azure_devops_rest.py, analytics_odata.py \n ├── cli/             # click façade \n ├── tests/           # behave features & steps \n └── scripts/         # sample notebooks \n \nThis keeps business concepts (Process, Metrics) front-and-center, not frameworks, echoing \nUncle Bob’s “Screaming Architecture” (nilebits.com). \n\n5.2 Dependencies (inline PEP 723) \n\nA __main__.py contains: \n\n# /// script \n# requires-python=\">=3.11\" \n# dependencies=[ \n#   \"azure-devops==7.*\", \n#   \"azure-identity>=1.16\", \n#   \"msgraph-core>=1.0.0\", \n#   \"click>=8.1\", \n#   \"orjson\", \n#   \"rich\", \n# ] \n# /// \n \nRunning uv run azdo_process_export will auto-bootstrap envs (cottongeeks.com). \n\n5.3 CLI Layer \n\nBuilt on Click for automatic --help generation (click.palletsprojects.com); see § 7 for sample \nhelp text. \n\n5.4 Data Model (excerpt) \n{ \n  \"exportedAt\": \"2025-07-08T15:04:05Z\", \n  \"project\": { \"id\": \"...\", \"name\": \"My Project\" }, \n  \"workItemTypes\": [ { \"name\": \"User Story\", \"usageLast12M\": 1234 }, … ], \n  \"fields\": [ { \"refName\": \"System.Title\", \"type\": \"string\" }, … ], \n  \"behaviors\": [ { \"name\": \"EpicsKanban\", \"inherits\": \"Kanban\" } ], \n  \"teams\": [ \n     { \n       \"id\": \"...\", \n       \"name\": \"Backend\", \n       \"settings\": { \"bugsBehavior\": \"asTasks\", \"workingDays\": [\"mon\"…\"fri\"] }, \n       \"members\": [ \n         { \"aadId\": \"...\", \"displayName\": \"Alice\", \"roleHint\": \"PR-heavy\" } \n       ] \n     } \n  ], \n  \"metrics\": { \n    \"workItemsClosedPerMonth\": { \"2025-06\": 42, … }, \n    \"prsMergedPerMonth\": { \"2025-06\": 18, … } \n  } \n} \n \n \n\n6. Error Handling & Warnings \n\nScenario Behavior \n\nAnalytics endpoint 404 Log error, abort export with exit code 2 and \nmessage “Analytics extension disabled for \nthis project; enable it or pass \n--skip-metrics.” \n \n401/403 Explain credential precedence and suggest \n--pat. \n \nPartial data fetch failure Collect successes, emit warnings array in \nJSON, set exit code 1. \n \n \n\n7. CLI Help (auto-generated by Click) \nUsage: azdo-process-export process [OPTIONS] PROJECT_NAME \n \n  Export every process artifact and activity metric for PROJECT_NAME into a \n  single JSON file. \n \nOptions: \n  --out PATH           Output file (default: ./process.json) \n  --pat TEXT           Personal Access Token (overrides DefaultAzureCredential) \n  --log-level [info|debug|trace] \n  --skip-metrics       Export configuration only, no Analytics queries \n  --version            Show version and exit. \n  --help               Show this message and exit. \n \n \n\n8. Testing Strategy \n● Behaviour-Driven: every requirement captured as a Gherkin scenario (features/) \nthen automated with Behave (behave.readthedocs.io). \n \n● E2E only – spin up an ephemeral Azure DevOps demo organization during CI; \nextensive Rich logs surface failures quickly. \n \n \n\n9. Open Questions \n1. Should we support export slices (e.g., last N months) for very large projects? \n \n2. Do we need pluggable output formats (Parquet) sooner than later? \n \n3. What is the maximum acceptable PAT scope we ask users to create? \n \n \n\n10. Appendix – Reference APIs \nArtifact Endpoint & Doc \n\nWork-Item Types /wit/workitemtypes 7.1 \n(learn.microsoft.com) \n\nFields /wit/fields (learn.microsoft.com) \n\nBehaviors /processes/{id}/behaviors \n(learn.microsoft.com) \n\nTeams /core/teams (learn.microsoft.com) \n\nBacklogs /work/backlogs (learn.microsoft.com) \n\nTeam Settings /work/teamsettings \n(learn.microsoft.com) \n\nPipelines Runs /pipelines/{id}/runs \n(learn.microsoft.com) \n\nOData Analytics /_odata/v4.0-preview/... \n(learn.microsoft.com) \n\nAzure AD user GET /users/{id} (Graph) \n(learn.microsoft.com) \n \nReferences \n\n● DefaultAzureCredential class – Azure Identity (learn.microsoft.com) \n \n● Azure-DevOps Python SDK – GitHub (github.com) \n \n● Logging best practices – Better Stack (betterstack.com) \n \nThis PRD should equip the engineering team to implement azdo-process-export in a single \nsprint. Questions & feedback welcome. \n\n"}}
