# Task ID: 5
# Title: Implement Resilient Async HTTP Client
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Develop an async Azure DevOps API client using httpx and asyncio, evolving resilience and concurrency features only as needed based on actual failures and requirements.
# Details:
Begin with the simplest possible async client for a real Azure DevOps API endpoint (e.g., listing projects or work items) using httpx==0.27.0 and asyncio. Do not add concurrency, retry, or error handling until tests or real usage demonstrate the need. Avoid premature optimizations such as hardcoded concurrency limits, complex backoff, or external retry libraries. Place the client in /infrastructure/http_client.py. Add complexity only in response to failing tests or encountered issues, following strict TDD and YAGNI principles.

# Test Strategy:
Start with a failing Behave scenario for a real Azure DevOps API call. Add further scenarios only as actual needs arise (e.g., retries on 429, concurrency for multiple operations). Use evidence-driven development: only add tests and implementation for features actually required or failing.

# Subtasks:
## 1. Scenario 1: Write failing test for minimal Azure DevOps API call [pending]
### Dependencies: None
### Description: Create a Behave scenario for a minimal async call to a real Azure DevOps API endpoint (e.g., list projects) and verify it fails initially.
### Details:


## 2. Implement 1: Make minimal Azure DevOps API scenario pass [pending]
### Dependencies: 5.1
### Description: Implement the simplest possible async Azure DevOps API client using httpx to make the minimal scenario pass. No retries, concurrency, or special error handling yet.
### Details:


## 3. Refactor 1: Clean up minimal client implementation [pending]
### Dependencies: 5.2
### Description: Refactor the minimal Azure DevOps API client for clarity and maintainability while keeping tests green.
### Details:


